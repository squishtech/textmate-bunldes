<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>
#export WORD=$(ruby -- &lt;&lt;-SCR1 
#	require File.join(ENV["TM_SUPPORT_PATH"], "lib/current_word.rb")
#	word = Word.current_word(/\w./)
#	print word
#SCR1
#)

export WORD=$(ruby -- &lt;&lt;-SCR1
	print ENV['TM_CURRENT_LINE'][0...ENV['TM_LINE_INDEX'].to_i].gsub!(/ *$/, "").match(/[\w.]*$/).to_s
SCR1
)


#check whether WORD is defined otherwise quit
[[ -z "$WORD" ]] &amp;&amp; echo "No keyword found" &amp;&amp; exit_show_tool_tip

. "$TM_BUNDLE_SUPPORT"/bin/rebuild_help_index.sh

#get the reference for WORD
REF=$(grep "^${WORD//./\\.}	" "${R_HOME:-/Library/Frameworks/R.framework/Resources}"/library/* -R --include AnIndex)
#get the latex file for parsing
FILE=$(echo -en "$REF" | sed 's/AnIndex.*	//;s/\/help\//\/latex\//')

#check whether something is found within the installed packages otherwise quit
[[ -z "$FILE" ]] &amp;&amp; echo "Nothing found" &amp;&amp; exit_show_tool_tip

#get the reference for WORD
FILE=$(grep "^${WORD//./\\.}	" "$TM_BUNDLE_SUPPORT"/help.index | awk '{print $2;}')

#check whether something is found within the installed packages otherwise quit
[[ -z "$FILE" ]] &amp;&amp; echo "Nothing found" &amp;&amp; exit_show_tool_tip

#get the usage from the latex file
OUT=$(cat "$FILE" | perl -e '
	undef($/);$w=$ENV{"WORD"};$a=&lt;&gt;;
	$a=~m/\\begin\{Usage\}\n\\begin\{verbatim\}\n?.*?($w *\(.*?\))\n.*?\\end\{verbatim\}/s;
	if(length($1)) {
		print $1;
	} else {
		$a=~m/\\begin\{Usage\}\n\\begin\{verbatim\}\n?.*?($w *\(.*?\)).*?\\end\{verbatim\}/s;
		print "$1";
	}
')

#if no usage is found quit
[[ -z "$OUT" ]] &amp;&amp; echo "No signature found" &amp;&amp; exit_show_tool_tip

#convert only the parameters into snippets
export RES=$(echo -en "$OUT" | perl -e '
undef($/);$a=&lt;&gt;;
$w=$ENV{"WORD"};
$a=~s/\n//mg;
$a=~s/^$w *\(//;
$a=~s/ //g;
$a=~s/\)$//;
$a=~s/\(([^\(\)]+?),([^\(\)]+?)\)/\($1|$2\)/g;
@arr=split(/,/, $a);
$cnt=1;$snip="(";
foreach $item (@arr){
	if($cnt==1){
		if(index($item,"=")&gt;0){
			@brr=split(/=/,$item);
			$snip.="\${".$cnt++.":$brr[0] = \${".$cnt++.":$brr[1]}}";
		} else {
			$snip.="\${".$cnt++.":$item}";
		}
	} else {
		if(index($item,"=")&gt;0){
			@brr=split(/=/,$item);
			$snip.="\${".$cnt++.":, $brr[0] = \${".$cnt++.":$brr[1]}}";
		} else {
			$snip.="\${".$cnt++.":, \${".$cnt++.":$item}}";
		}
	}
}
print $snip.")";
')

#if no parameter quit
[[ -z "$RES" ]] &amp;&amp; exit_discard

echo -en "$RES"
</string>
	<key>fallbackInput</key>
	<string>none</string>
	<key>input</key>
	<string>selection</string>
	<key>name</key>
	<string>Function Templateâ€¦</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>source.r, source.rd.console</string>
	<key>uuid</key>
	<string>4D425A1D-E272-4355-8041-311DD4486809</string>
</dict>
</plist>
